---
// src/components/PdfViewer.astro
export interface Props {
  pdfUrl: string;
}

const { pdfUrl } = Astro.props;

// Construct the worker URL. This is crucial for PDF.js.
// It assumes pdf.worker.min.mjs is available relative to the built assets.
// Astro typically places files from node_modules in /node_modules/ after build,
// but for development, we might need a more direct path or ensure it's copied.
// For now, let's aim for a path that works in production.
// We'll need to ensure the worker file is correctly served.
// This path assumes pdf.worker.min.mjs has been copied to the public directory.
const pdfjsWorkerSrc = `/pdf.worker.min.mjs`;

---
<div id="pdf-viewer-container" class="pdf-viewer-container">
  <div class="canvas-wrapper">
    <canvas id="pdf-canvas"></canvas>
  </div>
  <div class="pdf-controls">
    <button id="prev-page">
      <span class="icon"><</span>
      <span class="text">Previous</span>
    </button>
    <div id="page-indicator" class="page-indicator">
      <span id="page-num-display"></span>&nbsp;/&nbsp;<span id="page-count-display"></span>
    </div>
    <div id="page-navigation-group" style="display: none;">
      <div id="page-input-container" class="page-input-container">
        <input type="number" id="page-input" min="1" />
        <button id="goto-page-btn">Go</button>
        <span id="page-input-error-icon" class="page-input-error-icon" style="display: none;">&#9432;</span>
      </div>
    </div>
    <button id="next-page">
      <span class="icon">></span>
      <span class="text">Next</span>
    </button>
    <span class="spacer"></span>
    <button id="zoom-out" class="zoom-button">-</button>
    <span id="zoom-level" class="zoom-level-display">100%</span>
    <button id="zoom-in" class="zoom-button">+</button>
    <span class="spacer"></span>
    <button id="fullscreen-btn">
      <span class="icon">&#x2922;</span> <!-- Unicode for fullscreen icon â¤¢ -->
      <span class="text" style="display: none;">Full Screen</span> <!-- Text always hidden -->
    </button>
  </div>
</div>

<script define:vars={{ pdfUrl, pdfjsWorkerSrc }}>
  // Dynamically import pdfjs-dist to keep initial load small
  import('/pdf.min.mjs').then(async (pdfjsLib) => {
    if (!pdfjsLib.GlobalWorkerOptions.workerSrc && pdfjsWorkerSrc) {
      pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorkerSrc;
    }

    const loadingTask = pdfjsLib.getDocument(pdfUrl);
    const pdfDoc = await loadingTask.promise;

    const pageNumElement = document.getElementById('page-num-display'); // Updated ID
    const pageCountElement = document.getElementById('page-count-display'); // Updated ID
    const pageIndicator = document.getElementById('page-indicator');
    const pageNavigationGroup = document.getElementById('page-navigation-group');
    const pageInputContainer = document.getElementById('page-input-container'); // This is now the inner div
    const pageInput = document.getElementById('page-input');
    const gotoPageBtn = document.getElementById('goto-page-btn');
    const pageInputErrorIcon = document.getElementById('page-input-error-icon');
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    const zoomOutButton = document.getElementById('zoom-out');
    const zoomInButton = document.getElementById('zoom-in');
    const zoomLevelElement = document.getElementById('zoom-level');
    const fullscreenButton = document.getElementById('fullscreen-btn');
    const pdfViewerContainer = document.getElementById('pdf-viewer-container');
    const canvas = document.getElementById('pdf-canvas');
    const ctx = canvas.getContext('2d');

    let currentPageNum = 1;
    let currentScale = 1.5; // Initial scale
    const totalPages = pdfDoc.numPages;
    pageCountElement.textContent = totalPages.toString();

    function updateZoomLevelDisplay() {
      zoomLevelElement.textContent = `${Math.round(currentScale * 100)}%`;
    }

    async function renderPage(num) {
      const page = await pdfDoc.getPage(num);
      const viewport = page.getViewport({ scale: currentScale });

      canvas.height = viewport.height;
      canvas.width = viewport.width;
      // Set the CSS display size of the canvas to match its drawing resolution
      canvas.style.width = viewport.width + 'px';
      canvas.style.height = viewport.height + 'px';

      const renderContext = {
        canvasContext: ctx,
        viewport: viewport,
      };
      await page.render(renderContext).promise;
      pageNumElement.textContent = num.toString();

      // Update button states
      prevButton.disabled = num <= 1;
      nextButton.disabled = num >= totalPages;
      // Consider disabling zoom buttons at min/max scale if desired
    }

    prevButton.addEventListener('click', () => {
      if (currentPageNum <= 1) return;
      currentPageNum--;
      renderPage(currentPageNum);
    });

    nextButton.addEventListener('click', () => {
      if (currentPageNum >= totalPages) return;
      currentPageNum++;
      renderPage(currentPageNum);
    });

    renderPage(currentPageNum);
    updateZoomLevelDisplay(); // Initial display

    zoomInButton.addEventListener('click', () => {
      currentScale += 0.25;
      renderPage(currentPageNum);
      updateZoomLevelDisplay();
    });

    zoomOutButton.addEventListener('click', () => {
      if (currentScale <= 0.25) return; // Minimum scale
      currentScale -= 0.25;
      renderPage(currentPageNum);
      updateZoomLevelDisplay();
    });

    fullscreenButton.addEventListener('click', () => {
      if (!document.fullscreenElement) {
        pdfViewerContainer.requestFullscreen().catch(err => {
          alert(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
        });
      } else {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        }
      }
    });

    // Listen for fullscreen changes to update button text/icon if needed
    document.addEventListener('fullscreenchange', () => {
      // For now, we don't change the button appearance based on state,
      // but this is where you could do it.
      // For example, change "Full Screen" to "Exit Full Screen"
    });

    // --- Go to Page Functionality ---
    function switchToPageDisplayView() {
      pageNavigationGroup.style.display = 'none';
      pageInput.classList.remove('input-error');
      pageInput.removeAttribute('title');
      pageInput.removeAttribute('aria-invalid');
      pageInputErrorIcon.style.display = 'none';
      pageInputErrorIcon.removeAttribute('title');
      pageIndicator.style.display = 'inline-flex'; // Or 'block' or 'flex' depending on desired layout
    }

    function switchToPageInputView() {
      pageIndicator.style.display = 'none';
      pageNavigationGroup.style.display = 'block'; // Show the group
      pageInput.classList.remove('input-error');
      pageInput.removeAttribute('title');
      pageInput.removeAttribute('aria-invalid');
      pageInputErrorIcon.style.display = 'none';
      pageInputErrorIcon.removeAttribute('title');
      pageInput.value = currentPageNum.toString();
      pageInput.max = totalPages.toString();
      pageInput.focus();
      pageInput.select();
    }

    pageIndicator.addEventListener('click', switchToPageInputView);

    function handleGoToPage() {
      const newPageNum = parseInt(pageInput.value, 10);
      if (!isNaN(newPageNum) && newPageNum >= 1 && newPageNum <= totalPages) {
        pageInput.classList.remove('input-error');
        pageInput.removeAttribute('title');
        pageInput.removeAttribute('aria-invalid');
        pageInputErrorIcon.style.display = 'none';
        pageInputErrorIcon.removeAttribute('title');
        if (newPageNum !== currentPageNum) {
          currentPageNum = newPageNum;
          renderPage(currentPageNum);
        }
        switchToPageDisplayView();
      } else {
        pageInput.classList.add('input-error');
        // pageInput.title = `Choose a page number between 1 and ${totalPages}.`; // Title moved to icon
        pageInput.setAttribute('aria-invalid', 'true');
        pageInputErrorIcon.style.display = 'inline';
        pageInputErrorIcon.title = `Choose a page number between 1 and ${totalPages}.`;
        pageInput.focus();
        pageInput.select();
      }
    }

    gotoPageBtn.addEventListener('click', handleGoToPage);
    pageInput.addEventListener('keypress', (event) => {
      if (event.key === 'Enter') {
        event.preventDefault(); // Prevent form submission if it's in a form
        handleGoToPage();
      }
    });

    // Click outside to cancel page input
    document.addEventListener('click', function(event) {
      if (pageNavigationGroup.style.display === 'block') { // Check the parent group
        const isClickInsideNavGroup = pageNavigationGroup.contains(event.target);
        const isClickOnPageIndicator = pageIndicator.contains(event.target); // If user clicks indicator again
        if (!isClickInsideNavGroup && !isClickOnPageIndicator) {
          switchToPageDisplayView();
        }
      }
    }, true); // Use capture phase to catch clicks earlier

    pageInputErrorIcon.addEventListener('click', () => {
      // Only show alert if the icon is visible (i.e., there's an error) and it has a title
      if (pageInputErrorIcon.style.display !== 'none' && pageInputErrorIcon.title) {
        alert(pageInputErrorIcon.title);
      }
    });

  }).catch(error => {
    console.error("Error loading or rendering PDF:", error);
    const container = document.getElementById('pdf-viewer-container');
    if (container) {
      container.innerHTML = `<p>Error loading PDF: ${error.message}.</p>`;
    }
  });
</script>

<style>
  .pdf-viewer-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    border: 1px solid #ccc;
    background-color: #f9f9f9;
    padding: 10px;
    box-sizing: border-box;
    /* Ensure it respects the parent's height constraints */
    height: 100%; 
    overflow: hidden; /* Hide canvas overflow if any */
  }

  #pdf-canvas {
    border: 1px solid #bbb;
    /* max-width: 100%; */ /* Let canvas size be determined by PDF.js viewport */
    /* Height will be set by PDF.js based on page dimensions and scale */
    /* We'll make the canvas scrollable if it's taller than its container */
    display: block; /* Remove extra space below canvas */
    margin-bottom: 10px;
    flex-shrink: 0; /* Prevent canvas from shrinking within its flex parent (.canvas-wrapper) */
  }
  
  /* Make the canvas container scrollable if PDF page is tall */
  .pdf-viewer-container > #pdf-canvas {
      overflow-y: auto; /* This won't work directly on canvas, need a wrapper or adjust container */
      /* For now, let's assume the main container will handle scrolling if needed,
         or the canvas itself will be sized to fit.
         A better approach for tall pages is to put canvas in a scrollable div.
         Let's adjust the container to be scrollable for the canvas.
      */
  }

  /* Let's create a dedicated scrollable area for the canvas */
  .canvas-wrapper {
    width: 100%;
    flex-grow: 1; /* Takes up available vertical space */
    overflow-y: auto; /* Allows scrolling for tall PDF pages */
    overflow-x: auto; /* Allows scrolling for wide PDF pages (zoomed in) */
    display: flex;
    justify-content: center; /* Center canvas if it's narrower than wrapper */
    margin-bottom: 10px;
  }


  .pdf-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px 0;
    background-color: #eee;
    width: 100%;
    box-sizing: border-box;
    flex-shrink: 0; /* Prevent controls from shrinking */
  }

  .pdf-controls button {
    padding: 8px 12px;
    margin: 0 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .pdf-controls button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }

  .pdf-controls span {
    margin: 0 5px;
    font-size: 1em;
  }
  .page-indicator {
    cursor: pointer;
    padding: 0 5px; /* Give some clickable area */
    display: inline-flex; /* To align text nicely */
    align-items: center;
  }
  /* .page-input-container is now a child of page-navigation-group */
  .page-input-container {
    display: flex;
    align-items: center;
    justify-content: center; /* Center input and button if group is wider */
    /* margin: 0 5px; /* Margin now on page-navigation-group or individual elements */
  }
  /* .page-input-error-message class removed */
  #page-input {
    width: 50px; /* Slightly wider for 3 digits */
    text-align: right;
    margin-right: 5px;
    padding: 4px 6px; /* Increased padding for better touch */
    border: 1px solid #ccc;
    border-radius: 3px;
    font-size: 0.95em;
  }
  #page-input.input-error {
    border-color: #d9534f; /* Red border for error */
    box-shadow: 0 0 0 0.2rem rgba(217, 83, 79, 0.25); /* Optional: subtle glow */
  }
  .page-input-error-icon {
    color: #d9534f; /* Red color for the icon */
    margin-left: 5px;
    cursor: help; /* Indicates more info on hover */
    font-weight: bold;
    display: inline-flex; /* To align with button/input */
    align-items: center;
  }
  #goto-page-btn {
    padding: 5px 10px; /* Increased padding */
    font-size: 0.9em;
    /* background-color: #007bff; Already default button style */
    /* color: white; Already default button style */
    /* border: none; Already default button style */
    /* border-radius: 3px; Already default button style */
    /* cursor: pointer; Already default button style */
    line-height: 1; /* Ensure text is centered well */
  }

  .spacer {
    margin: 0 10px; /* Adds some space */
  }

  .pdf-controls button .icon {
    display: none; /* Hidden by default, shown on mobile for prev/next */
    font-weight: bold; /* Make icons bold by default if they are shown */
  }
  .pdf-controls button .text {
    display: inline; /* Shown by default, hidden on mobile for specified buttons */
  }

  /* Fullscreen button icon always visible */
  .pdf-controls button#fullscreen-btn .icon {
    display: inline;
    font-size: 1.2em; /* Make icon a bit larger */
  }
   /* Fullscreen button text always hidden (already set inline, but good for clarity) */
  .pdf-controls button#fullscreen-btn .text {
    display: none !important;
  }


  /* Mobile styles */
  @media (max-width: 768px) {
    .pdf-controls button#prev-page .text,
    .pdf-controls button#next-page .text { /* Fullscreen text already handled */
      display: none;
    }

    .pdf-controls button#prev-page .icon,
    .pdf-controls button#next-page .icon { /* Fullscreen icon already handled */
      display: inline;
    }
    
    /* Zoom buttons on mobile */
    .pdf-controls button.zoom-button {
      font-weight: bold;
      padding: 8px; /* Make it more square-like and consistent with other mobile icon buttons */
    }

    .zoom-level-display {
      display: none; /* Hide zoom percentage on mobile */
    }

    .pdf-controls button {
      padding: 8px; /* Default padding for icon buttons on mobile */
      margin: 0 5px;
    }
     /* Ensure fullscreen icon button has consistent padding on mobile */
    .pdf-controls button#fullscreen-btn {
        padding: 8px 10px;
    }
  }
</style>