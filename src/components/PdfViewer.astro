---
// src/components/PdfViewer.astro
export interface Props {
  pdfUrl: string;
}

const { pdfUrl } = Astro.props;

// Construct the worker URL for PDF.js
const pdfjsWorkerSrc = `/pdf.worker.min.mjs`;
---

<div id="pdf-viewer-container" class="pdf-viewer-container">
  <div class="canvas-wrapper">
    <canvas id="pdf-canvas"></canvas>
  </div>
  <div class="pdf-controls">
    <button id="prev-page">
      <span class="icon"><</span>
      <span class="text">Previous</span>
    </button>
    <div id="page-indicator" class="page-indicator">
      <span id="page-num-display"></span>&nbsp;/&nbsp;<span id="page-count-display"></span>
    </div>
    <div id="page-navigation-group" style="display: none;">
      <div id="page-input-container" class="page-input-container">
        <input type="number" id="page-input" min="1" />
        <button id="goto-page-btn">Go</button>
        <span id="page-input-error-icon" class="page-input-error-icon" style="display: none;">&#9432;</span>
      </div>
    </div>
    <button id="next-page">
      <span class="icon">></span>
      <span class="text">Next</span>
    </button>
    <span class="spacer"></span>
    <button id="zoom-out" class="zoom-button">-</button>
    <span id="zoom-level" class="zoom-level-display">100%</span>
    <button id="zoom-in" class="zoom-button">+</button>
    <span class="spacer"></span>
    <button id="fullscreen-btn">
      <span class="icon">&#x2922;</span>
      <span class="text" style="display: none;">Full Screen</span>
    </button>
    
    <!-- Hamburger Menu Button -->
    <button id="menu-btn" class="menu-button" title="More Options">
      <span class="icon">‚ò∞</span>
    </button>
  </div>

  <!-- Modal Overlay Menu -->
  <div id="pdf-menu-overlay" class="pdf-menu-overlay" style="display: none;">
    <div class="pdf-menu-modal">
      <div class="menu-header">
        <h3 class="menu-title">üìñ PDF Viewer Options</h3>
        <button id="menu-close-btn" class="menu-close-btn">&times;</button>
      </div>
      
      <div class="menu-content">
        <div class="menu-section">
          <h4 class="menu-section-title">üìö How to Use</h4>
          <div class="menu-info">
            <p>Use the controls below to navigate through the PDF document.</p>
            <ul>
              <li>üñ±Ô∏è Use Previous/Next buttons to navigate pages</li>
              <li>üîç Use +/- buttons to zoom in and out</li>
              <li>üì± Click page number to jump to specific page</li>
              <li>‚õ∂ Use fullscreen button for immersive reading</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>

</div>

<script define:vars={{ pdfUrl, pdfjsWorkerSrc }}>
  // Global variables
  let currentPdfDoc = null;
  let currentPageNum = 1;
  let currentScale = 1.5;
  let totalPages = 0;
  let isInitialized = false;

  // Cleanup function to prevent multiple initializations
  function cleanup() {
    if (currentPdfDoc) {
      console.log('Cleaning up existing PDF document');
      currentPdfDoc = null;
    }
    currentPageNum = 1;
    totalPages = 0;
    isInitialized = false;
  }

  // Initialize PDF viewer
  async function initializePdfViewer() {
    if (isInitialized) {
      console.log('PDF viewer already initialized, skipping...');
      return;
    }
    
    try {
      console.log('üöÄ Starting PDF viewer initialization...');
      
      // Wait for DOM to be ready with multiple checks
      await waitForDOMReady();
      
      // Wait for required elements to be available
      await waitForRequiredElements();
      
      // Initialize PDF
      await loadPdf();
      
      // Setup event listeners
      setupEventListeners();
      
      console.log('‚úÖ PDF viewer initialization complete');
      isInitialized = true;
      
    } catch (error) {
      console.error('‚ùå Initialization failed:', error);
      const canvasWrapper = document.querySelector('.canvas-wrapper');
      if (canvasWrapper) {
        canvasWrapper.innerHTML = `<div style="padding: 20px; text-align: center; color: #721c24; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px;">
          <h3>‚ùå PDF Viewer Initialization Failed</h3>
          <p>Error: ${error.message}</p>
          <p>Please refresh the page to try again.</p>
        </div>`;
      }
    }
  }

  async function waitForDOMReady() {
    if (document.readyState === 'loading') {
      console.log('Waiting for DOM to be ready...');
      await new Promise(resolve => {
        document.addEventListener('DOMContentLoaded', resolve);
      });
    }
    console.log('DOM is ready');
  }

  async function waitForRequiredElements() {
    const requiredSelectors = [
      '.canvas-wrapper',
      '#page-num-display',
      '#page-count-display',
      '#prev-page',
      '#next-page'
    ];
    
    const maxWaitTime = 5000; // 5 seconds max wait
    const checkInterval = 100; // Check every 100ms
    let waitTime = 0;
    
    while (waitTime < maxWaitTime) {
      const missingElements = requiredSelectors.filter(selector => !document.querySelector(selector));
      
      if (missingElements.length === 0) {
        console.log('All required elements found');
        return;
      }
      
      console.log(`Waiting for elements: ${missingElements.join(', ')}`);
      await new Promise(resolve => setTimeout(resolve, checkInterval));
      waitTime += checkInterval;
    }
    
    const stillMissing = requiredSelectors.filter(selector => !document.querySelector(selector));
    if (stillMissing.length > 0) {
      console.warn(`Some elements still missing after ${maxWaitTime}ms: ${stillMissing.join(', ')}`);
      // Continue anyway - some elements might be optional
    }
  }

  async function loadPdf() {
    console.log('Loading PDF:', pdfUrl);
    
    try {
      // Dynamically import pdfjs-dist
      const pdfjsLib = await import('/pdf.min.mjs');
      
      // Set worker source
      pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorkerSrc;
      console.log('PDF.js worker source set to:', pdfjsWorkerSrc);

      const loadingTask = pdfjsLib.getDocument(pdfUrl);
      currentPdfDoc = await loadingTask.promise;
      totalPages = currentPdfDoc.numPages;
      
      console.log(`PDF loaded successfully: ${totalPages} pages`);

      // Update page display
      const pageNumElement = document.getElementById('page-num-display');
      const pageCountElement = document.getElementById('page-count-display');
      
      console.log('Updating page display:', { currentPageNum, totalPages });
      
      if (pageCountElement) {
        pageCountElement.textContent = totalPages.toString();
        console.log('Set page count to:', totalPages);
      } else {
        console.warn('Page count element not found');
      }
      
      if (pageNumElement) {
        pageNumElement.textContent = currentPageNum.toString();
        console.log('Set current page to:', currentPageNum);
      } else {
        console.warn('Page number element not found');
      }

      // Set page input max value
      const pageInput = document.getElementById('page-input');
      if (pageInput) {
        pageInput.max = totalPages.toString();
        pageInput.min = "1";
      }

      // Load saved reading progress
      const savedPage = loadReadingProgress();
      if (savedPage && savedPage !== currentPageNum && savedPage <= totalPages) {
        currentPageNum = savedPage;
      }

      // Initial render
      await renderPage(currentPageNum);
      updateZoomLevelDisplay();
      
    } catch (error) {
      console.error('Failed to load PDF:', error);
      const canvasWrapper = document.querySelector('.canvas-wrapper');
      if (canvasWrapper) {
        canvasWrapper.innerHTML = `<div style="padding: 20px; text-align: center; color: #721c24; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px;">
          <h3>‚ùå Failed to load PDF</h3>
          <p>Error: ${error.message}</p>
          <p>PDF URL: ${pdfUrl}</p>
          <p>Please check that the PDF file exists and is accessible.</p>
        </div>`;
      }
    }
  }


  // PDF Rendering Functions
  async function renderPage(num, scale = null) {
    if (!currentPdfDoc) {
      console.error('Cannot render page: PDF document not loaded');
      return;
    }
    
    if (num < 1 || num > totalPages) {
      console.error(`Invalid page number: ${num}. Valid range: 1-${totalPages}`);
      return;
    }
    
    const useScale = scale || currentScale;
    console.log(`Rendering page ${num} of ${totalPages} at scale ${useScale}`);
    
    try {
      const page = await currentPdfDoc.getPage(num);
      const viewport = page.getViewport({ scale: useScale });

      // Get canvas container
      const canvasWrapper = document.querySelector('.canvas-wrapper');
      if (!canvasWrapper) {
        console.error('Canvas wrapper not found');
        return;
      }

      // Create fresh canvas
      const oldCanvas = document.getElementById('pdf-canvas');
      if (oldCanvas) {
        oldCanvas.remove();
      }
      
      const canvas = document.createElement('canvas');
      canvas.id = 'pdf-canvas';
      
      // Set canvas dimensions properly
      const devicePixelRatio = window.devicePixelRatio || 1;
      canvas.width = viewport.width * devicePixelRatio;
      canvas.height = viewport.height * devicePixelRatio;
      canvas.style.width = viewport.width + 'px';
      canvas.style.height = viewport.height + 'px';
      
      canvasWrapper.appendChild(canvas);

      const ctx = canvas.getContext('2d');
      
      // Scale context for high DPI displays
      ctx.scale(devicePixelRatio, devicePixelRatio);
      
      const renderContext = {
        canvasContext: ctx,
        viewport: viewport,
      };
      
      console.log(`Starting render for page ${num}...`);
      await page.render(renderContext).promise;
      console.log(`‚úÖ Successfully rendered page ${num}`);
      
      // Update state
      currentPageNum = num;
      currentScale = useScale;
      
      // Update UI
      const pageNumElement = document.getElementById('page-num-display');
      if (pageNumElement) {
        pageNumElement.textContent = num.toString();
        console.log('Updated page display to:', num);
      } else {
        console.warn('Page number element not found during render');
      }

      // Scroll canvas-wrapper to top of the page
      if (canvasWrapper) {
        canvasWrapper.scrollTop = 0;
      } else {
        console.warn('canvasWrapper not found, unable to scroll to top');
      }

      const prevButton = document.getElementById('prev-page');
      const nextButton = document.getElementById('next-page');
      if (prevButton) prevButton.disabled = num <= 1;
      if (nextButton) nextButton.disabled = num >= totalPages;
      
      // Save reading progress
      saveReadingProgress();
      
      console.log(`Successfully rendered page ${num}`);
      
    } catch (error) {
      console.error('Error rendering page:', error);
      const canvasWrapper = document.querySelector('.canvas-wrapper');
      if (canvasWrapper) {
        canvasWrapper.innerHTML = `<div style="padding: 20px; text-align: center; color: #721c24; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px;">
          <h3>‚ùå Failed to render page ${num}</h3>
          <p>Error: ${error.message}</p>
        </div>`;
      }
    }
  }

  function updateZoomLevelDisplay() {
    const zoomLevelElement = document.getElementById('zoom-level');
    if (zoomLevelElement) {
      zoomLevelElement.textContent = `${Math.round(currentScale * 100)}%`;
    }
  }

  // Reading Progress Functions
  function saveReadingProgress() {
    const progress = {
      pdfUrl: pdfUrl,
      currentPage: currentPageNum,
      timestamp: Date.now()
    };
    localStorage.setItem('pdfReadingProgress', JSON.stringify(progress));
  }

  function loadReadingProgress() {
    try {
      const saved = localStorage.getItem('pdfReadingProgress');
      if (saved) {
        const progress = JSON.parse(saved);
        if (progress.pdfUrl === pdfUrl) {
          return progress.currentPage;
        }
      }
    } catch (error) {
      console.error('Failed to load reading progress:', error);
    }
    return 1;
  }

  // Event Listeners Setup
  function setupEventListeners() {
    console.log('üîß Setting up event listeners...');
    
    // Navigation buttons
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    
    console.log('Navigation buttons found:', { prevButton: !!prevButton, nextButton: !!nextButton });
    
    if (prevButton) {
      prevButton.addEventListener('click', async () => {
        console.log('Previous button clicked');
        if (currentPageNum > 1) {
          await renderPage(currentPageNum - 1);
        }
      });
    } else {
      console.warn('Previous button not found');
    }

    if (nextButton) {
      nextButton.addEventListener('click', async () => {
        console.log('Next button clicked');
        if (currentPageNum < totalPages) {
          await renderPage(currentPageNum + 1);
        }
      });
    } else {
      console.warn('Next button not found');
    }

    // Zoom controls
    const zoomInButton = document.getElementById('zoom-in');
    const zoomOutButton = document.getElementById('zoom-out');
    
    console.log('Zoom buttons found:', { zoomInButton: !!zoomInButton, zoomOutButton: !!zoomOutButton });
    
    if (zoomInButton) {
      zoomInButton.addEventListener('click', async () => {
        console.log('Zoom in button clicked');
        const newScale = currentScale + 0.25;
        await renderPage(currentPageNum, newScale);
        updateZoomLevelDisplay();
      });
    } else {
      console.warn('Zoom in button not found');
    }

    if (zoomOutButton) {
      zoomOutButton.addEventListener('click', async () => {
        console.log('Zoom out button clicked');
        if (currentScale > 0.25) {
          const newScale = currentScale - 0.25;
          await renderPage(currentPageNum, newScale);
          updateZoomLevelDisplay();
        }
      });
    } else {
      console.warn('Zoom out button not found');
    }

    // Fullscreen
    const fullscreenButton = document.getElementById('fullscreen-btn');
    const pdfViewerContainer = document.getElementById('pdf-viewer-container');
    
    console.log('Other elements found:', { fullscreenButton: !!fullscreenButton, pdfViewerContainer: !!pdfViewerContainer });
    
    if (fullscreenButton && pdfViewerContainer) {
      fullscreenButton.addEventListener('click', () => {
        console.log('Fullscreen button clicked');
        if (!document.fullscreenElement) {
          pdfViewerContainer.requestFullscreen().catch(err => {
            console.log('Fullscreen request failed:', err);
          });
        } else {
          document.exitFullscreen().catch(err => {
            console.log('Exit fullscreen failed:', err);
          });
        }
      });
    } else {
      console.warn('Fullscreen button or container not found');
    }

    // Page navigation
    setupPageNavigation();
    
    // Menu functionality
    setupMenuControls();
    
    // Keyboard shortcuts
    setupKeyboardShortcuts();
  }

  function setupPageNavigation() {
    const pageIndicator = document.getElementById('page-indicator');
    const pageNavigationGroup = document.getElementById('page-navigation-group');
    const pageInput = document.getElementById('page-input');
    const gotoPageBtn = document.getElementById('goto-page-btn');

    if (pageIndicator) {
      pageIndicator.addEventListener('click', () => {
        if (pageNavigationGroup) {
          pageNavigationGroup.style.display = 'block';
        }
        if (pageIndicator) {
          pageIndicator.style.display = 'none';
        }
        if (pageInput) {
          pageInput.value = currentPageNum.toString();
          pageInput.focus();
          pageInput.select();
        }
      });
    }

    async function handleGoToPage() {
      if (!pageInput) return;
      const newPageNum = parseInt(pageInput.value, 10);
      if (!isNaN(newPageNum) && newPageNum >= 1 && newPageNum <= totalPages) {
        if (newPageNum !== currentPageNum) {
          await renderPage(newPageNum);
        }
        switchToPageDisplayView();
      } else {
        pageInput.focus();
        pageInput.select();
      }
    }

    function switchToPageDisplayView() {
      if (pageNavigationGroup) {
        pageNavigationGroup.style.display = 'none';
      }
      if (pageIndicator) {
        pageIndicator.style.display = 'inline-flex';
      }
    }

    if (gotoPageBtn) {
      gotoPageBtn.addEventListener('click', handleGoToPage);
    }
    
    if (pageInput) {
      pageInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
          event.preventDefault();
          handleGoToPage();
        }
      });
    }
  }

  function setupMenuControls() {
    const menuBtn = document.getElementById('menu-btn');
    const menuOverlay = document.getElementById('pdf-menu-overlay');
    const menuCloseBtn = document.getElementById('menu-close-btn');

    if (menuBtn && menuOverlay) {
      menuBtn.addEventListener('click', () => {
        menuOverlay.style.display = 'flex';
      });
    }

    if (menuCloseBtn && menuOverlay) {
      menuCloseBtn.addEventListener('click', () => {
        menuOverlay.style.display = 'none';
      });
    }

    if (menuOverlay) {
      menuOverlay.addEventListener('click', (e) => {
        if (e.target === menuOverlay) {
          menuOverlay.style.display = 'none';
        }
      });
    }
  }


  function setupKeyboardShortcuts() {
    document.addEventListener('keydown', (event) => {
      // Only handle shortcuts when not typing in inputs
      if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
        return;
      }

      if (event.ctrlKey || event.metaKey) {
        switch (event.key) {
          case 'ArrowRight': // Ctrl/Cmd + Right - Next page
            event.preventDefault();
            if (currentPageNum < totalPages) {
              renderPage(currentPageNum + 1);
            }
            break;
          case 'ArrowLeft': // Ctrl/Cmd + Left - Previous page
            event.preventDefault();
            if (currentPageNum > 1) {
              renderPage(currentPageNum - 1);
            }
            break;
        }
      }
    });
  }

  // Initialize with multiple fallbacks and better timing
  let initializationAttempted = false;
  
  function attemptInitialization() {
    if (initializationAttempted) {
      console.log('Initialization already attempted, skipping...');
      return;
    }
    initializationAttempted = true;
    
    // Small delay to ensure all elements are rendered
    setTimeout(() => {
      initializePdfViewer();
    }, 100);
  }

  // Primary initialization
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', attemptInitialization);
  } else if (document.readyState === 'interactive') {
    // DOM is ready but resources might still be loading
    attemptInitialization();
  } else {
    // DOM and resources are ready
    attemptInitialization();
  }
  
  // Fallback initialization on window load
  window.addEventListener('load', () => {
    if (!isInitialized && !currentPdfDoc) {
      console.log('Fallback initialization on window load');
      initializationAttempted = false; // Allow retry
      attemptInitialization();
    }
  });
  
  // Additional fallback with delay for problematic cases
  setTimeout(() => {
    if (!isInitialized && !currentPdfDoc) {
      console.log('Final fallback initialization after 2 seconds');
      initializationAttempted = false; // Allow retry
      attemptInitialization();
    }
  }, 2000);

  // Cleanup on page unload
  window.addEventListener('beforeunload', cleanup);
  
  // Cleanup on page hide (for mobile browsers)
  window.addEventListener('pagehide', cleanup);
</script>

<style>
  .pdf-viewer-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    background: transparent;
  }

  .canvas-wrapper {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    overflow: auto;
    padding: 0;
    background: transparent;
    min-height: 0; /* Allow flex item to shrink */
  }

  #pdf-canvas {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    background: white;
    display: block;
    margin: auto;
    max-width: none;
    max-height: none;
  }

  .pdf-controls {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px 20px;
    background: white;
    border-top: 1px solid #ddd;
    flex-wrap: wrap;
  }

  .pdf-controls button {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    cursor: pointer;
    font-size: 14px;
  }

  .pdf-controls button:hover {
    background: #f0f0f0;
  }

  .pdf-controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .page-indicator {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }

  .page-input-container {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  #page-input {
    width: 60px;
    padding: 4px 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    text-align: center;
  }

  .zoom-level-display {
    padding: 8px 12px;
    background: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    min-width: 50px;
    text-align: center;
  }

  .spacer {
    flex: 1;
  }

  .menu-button {
    font-size: 18px !important;
  }

  /* Menu Overlay Styles */
  .pdf-menu-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .pdf-menu-modal {
    background: white;
    border-radius: 8px;
    padding: 20px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
  }

  .menu-title {
    margin: 0;
    font-size: 18px;
  }

  .menu-close-btn {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .menu-section {
    margin-bottom: 20px;
  }

  .menu-section-title {
    font-size: 16px;
    margin: 0 0 10px 0;
    color: #333;
  }

  .menu-options {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .menu-option {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    padding: 8px;
    border-radius: 4px;
    transition: background-color 0.2s;
  }

  .menu-option:hover {
    background: #f8f9fa;
  }

  .option-icon {
    font-size: 16px;
  }

  .option-text {
    font-size: 14px;
  }

  .menu-controls {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .control-row {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .control-label {
    font-weight: 500;
    min-width: 60px;
    font-size: 14px;
  }

  .menu-control-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    border: none;
    border-radius: 6px;
    background: #f8f9fa;
    color: #495057;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
  }

  .menu-control-btn:hover {
    background: #e9ecef;
    transform: translateY(-1px);
  }

  .menu-control-btn:active {
    transform: translateY(0);
  }

  .menu-control-btn .icon {
    font-size: 16px;
  }

  .menu-select {
    flex: 1;
    padding: 6px 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    background: white;
    font-size: 14px;
    max-width: 200px;
    min-width: 150px;
  }


  /* Menu Info Styles */
  .menu-info {
    padding: 15px;
    background: #f8f9fa;
    border-radius: 6px;
    border: 1px solid #e9ecef;
  }

  .menu-info p {
    margin: 0 0 10px 0;
    color: #495057;
    font-size: 14px;
  }

  .menu-info ul {
    margin: 0;
    padding-left: 20px;
    color: #6c757d;
    font-size: 13px;
  }

  .menu-info li {
    margin-bottom: 5px;
  }

  @media (max-width: 768px) {
    .pdf-controls {
      padding: 8px 10px;
      gap: 5px;
    }
    
    .pdf-controls button {
      padding: 6px 8px;
      font-size: 12px;
    }
    
    .pdf-controls .text {
      display: none;
    }
    
    .pdf-menu-modal {
      width: 95%;
      padding: 15px;
    }
  }
</style>