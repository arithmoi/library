---
// CloudTtsComponent.astro - TTS for static Astro sites
// Works without requiring users to download anything
export interface Props {
  text?: string;
  autoInit?: boolean;
  showControls?: boolean;
  className?: string;
}

const { 
  text = "", 
  autoInit = true, 
  showControls = true, 
  className = "" 
} = Astro.props;
---

<div class={`cloud-tts-component ${className}`}>
  {showControls && (
    <div class="tts-controls">
      <div class="tts-header">
        <h3>üîä Text-to-Speech</h3>
        <span class="tts-status" id="cloud-tts-status">Initializing...</span>
      </div>
      
      <div class="tts-content">
        <textarea 
          id="cloud-tts-text" 
          placeholder="Enter text to speak or select text from the page..."
          rows="4"
        >{text}</textarea>
        
        <div class="tts-options">
          <div class="option-group">
            <label for="cloud-voice-select">Voice:</label>
            <select id="cloud-voice-select">
              <option value="">Loading voices...</option>
            </select>
          </div>
          
          <div class="option-group">
            <label for="cloud-rate-slider">Speed:</label>
            <input type="range" id="cloud-rate-slider" min="0.5" max="2" step="0.1" value="1">
            <span id="cloud-rate-value">1.0x</span>
          </div>
        </div>
        
        <div class="tts-buttons">
          <button id="cloud-speak-btn" class="btn btn-primary">
            ‚ñ∂Ô∏è Speak
          </button>
          <button id="cloud-pause-btn" class="btn btn-secondary" disabled>
            ‚è∏Ô∏è Pause
          </button>
          <button id="cloud-stop-btn" class="btn btn-danger" disabled>
            ‚èπÔ∏è Stop
          </button>
          <button id="cloud-clear-btn" class="btn btn-secondary">
            üóëÔ∏è Clear
          </button>
        </div>
      </div>
      
      <div class="tts-footer">
        <small>Provider: <span id="cloud-current-provider">-</span></small>
        <small>Status: Works without downloads!</small>
      </div>
    </div>
  )}
</div>

<style>
  .cloud-tts-component {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .tts-controls {
    background: white;
    border: 1px solid #e1e5e9;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    max-width: 500px;
  }

  .tts-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #e1e5e9;
  }

  .tts-header h3 {
    margin: 0;
    color: #2c3e50;
    font-size: 1.2rem;
  }

  .tts-status {
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    background: #e9ecef;
    color: #6c757d;
  }

  .tts-status.ready {
    background: #d4edda;
    color: #155724;
  }

  .tts-status.playing {
    background: #cce5ff;
    color: #004085;
  }

  .tts-status.error {
    background: #f8d7da;
    color: #721c24;
  }

  #cloud-tts-text {
    width: 100%;
    min-height: 100px;
    padding: 12px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-family: inherit;
    font-size: 0.9rem;
    resize: vertical;
    margin-bottom: 15px;
    transition: border-color 0.3s;
  }

  #cloud-tts-text:focus {
    outline: none;
    border-color: #007bff;
  }

  .tts-options {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 15px;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .option-group label {
    font-weight: 600;
    color: #2c3e50;
    font-size: 0.9rem;
  }

  .option-group select,
  .option-group input[type="range"] {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 0.9rem;
  }

  .tts-buttons {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
    margin-bottom: 15px;
  }

  .btn {
    padding: 10px 16px;
    border: none;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
    font-size: 0.9rem;
  }

  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .btn-primary {
    background: #007bff;
    color: white;
  }

  .btn-primary:hover:not(:disabled) {
    background: #0056b3;
  }

  .btn-secondary {
    background: #6c757d;
    color: white;
  }

  .btn-secondary:hover:not(:disabled) {
    background: #545b62;
  }

  .btn-danger {
    background: #dc3545;
    color: white;
  }

  .btn-danger:hover:not(:disabled) {
    background: #c82333;
  }

  .tts-footer {
    display: flex;
    justify-content: space-between;
    font-size: 0.8rem;
    color: #6c757d;
    padding-top: 10px;
    border-top: 1px solid #e1e5e9;
  }

  @media (max-width: 600px) {
    .tts-options {
      grid-template-columns: 1fr;
    }
    
    .tts-buttons {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Import the CloudTtsManager
  import '/src/components/CloudTtsManager.js';

  class CloudTtsController {
    constructor() {
      this.ttsManager = null;
      this.isPaused = false;
      this.init();
    }

    async init() {
      try {
        // Initialize Cloud TTS Manager
        this.ttsManager = new window.CloudTtsManager();
        
        // Set up event handlers
        this.ttsManager.onSuccess = (message) => {
          this.updateStatus('Ready', 'ready');
          this.populateVoices();
          this.updateProviderDisplay();
          console.log('‚úÖ Cloud TTS Ready:', message);
        };

        this.ttsManager.onError = (guidance) => {
          this.updateStatus('Setup Required', 'error');
          this.showGuidanceModal(guidance);
          console.log('‚ÑπÔ∏è Cloud TTS Guidance:', guidance);
        };

        this.ttsManager.onStatusChange = (status) => {
          this.updatePlaybackControls(status);
          this.updateProviderDisplay(status.provider);
        };

        // Initialize TTS system
        await this.ttsManager.initialize();
        
        // Set up UI event listeners
        this.setupEventListeners();
        
        // Auto-populate text from page selection
        this.setupTextSelection();

      } catch (error) {
        console.error('Cloud TTS initialization failed:', error);
        this.updateStatus('Error', 'error');
      }
    }

    setupEventListeners() {
      // Speak button
      document.getElementById('cloud-speak-btn')?.addEventListener('click', () => {
        this.speakText();
      });

      // Pause button
      document.getElementById('cloud-pause-btn')?.addEventListener('click', () => {
        this.pauseResume();
      });

      // Stop button
      document.getElementById('cloud-stop-btn')?.addEventListener('click', () => {
        this.stopSpeech();
      });

      // Clear button
      document.getElementById('cloud-clear-btn')?.addEventListener('click', () => {
        this.clearText();
      });

      // Rate slider
      const rateSlider = document.getElementById('cloud-rate-slider');
      rateSlider?.addEventListener('input', (e) => {
        document.getElementById('cloud-rate-value').textContent = `${e.target.value}x`;
      });

      // Voice selection
      document.getElementById('cloud-voice-select')?.addEventListener('change', (e) => {
        console.log(`Voice changed: ${e.target.value || 'Default'}`);
      });
    }

    setupTextSelection() {
      // Listen for text selection on the page
      document.addEventListener('selectionchange', () => {
        const selectedText = window.getSelection().toString().trim();
        if (selectedText.length > 0) {
          const textArea = document.getElementById('cloud-tts-text');
          if (textArea) {
            textArea.value = selectedText;
          }
        }
      });
    }

    async speakText() {
      const textArea = document.getElementById('cloud-tts-text');
      const text = textArea?.value.trim();
      
      if (!text) {
        alert('Please enter or select text to speak');
        return;
      }

      if (!this.ttsManager) {
        alert('TTS not initialized. Please wait or refresh the page.');
        return;
      }

      try {
        const voice = document.getElementById('cloud-voice-select')?.value;
        const rate = parseFloat(document.getElementById('cloud-rate-slider')?.value || '1');

        console.log(`üîä Speaking with Cloud TTS: "${text.substring(0, 50)}..."`);

        await this.ttsManager.speak(text, {
          voice: voice || null,
          rate: rate,
          lang: 'en'
        });

        console.log('‚úÖ Cloud TTS speech started successfully');

      } catch (error) {
        console.error('‚ùå Cloud TTS speech failed:', error);
        alert(`Speech failed: ${error.message}`);
      }
    }

    stopSpeech() {
      if (this.ttsManager) {
        this.ttsManager.stop();
        this.isPaused = false;
        console.log('‚èπÔ∏è Cloud TTS speech stopped');
      }
    }

    pauseResume() {
      if (!this.ttsManager) return;

      if (this.isPaused) {
        this.ttsManager.resume();
        this.isPaused = false;
        document.getElementById('cloud-pause-btn').textContent = '‚è∏Ô∏è Pause';
        console.log('‚ñ∂Ô∏è Cloud TTS speech resumed');
      } else {
        this.ttsManager.pause();
        this.isPaused = true;
        document.getElementById('cloud-pause-btn').textContent = '‚ñ∂Ô∏è Resume';
        console.log('‚è∏Ô∏è Cloud TTS speech paused');
      }
    }

    clearText() {
      const textArea = document.getElementById('cloud-tts-text');
      if (textArea) {
        textArea.value = '';
      }
      console.log('üóëÔ∏è Text cleared');
    }

    updateStatus(text, type) {
      const statusEl = document.getElementById('cloud-tts-status');
      if (statusEl) {
        statusEl.textContent = text;
        statusEl.className = `tts-status ${type}`;
      }
    }

    updatePlaybackControls(status) {
      const speakBtn = document.getElementById('cloud-speak-btn');
      const pauseBtn = document.getElementById('cloud-pause-btn');
      const stopBtn = document.getElementById('cloud-stop-btn');

      if (speakBtn) {
        speakBtn.disabled = status.isPlaying;
        speakBtn.textContent = status.isPlaying ? 'üîä Playing...' : '‚ñ∂Ô∏è Speak';
      }

      if (pauseBtn) {
        pauseBtn.disabled = !status.isPlaying;
      }

      if (stopBtn) {
        stopBtn.disabled = !status.isPlaying;
      }

      if (status.isPlaying) {
        this.updateStatus('Playing', 'playing');
      } else {
        this.updateStatus('Ready', 'ready');
      }
    }

    populateVoices() {
      const voiceSelect = document.getElementById('cloud-voice-select');
      
      if (!this.ttsManager || !voiceSelect) {
        return;
      }

      const voices = this.ttsManager.getVoices();
      voiceSelect.innerHTML = '<option value="">Default Voice</option>';

      voices.forEach(voice => {
        const option = document.createElement('option');
        option.value = voice.name;
        option.textContent = `${voice.name} (${voice.lang})`;
        voiceSelect.appendChild(option);
      });

      console.log(`üé§ Loaded ${voices.length} cloud voices`);
    }

    updateProviderDisplay(provider) {
      const providerEl = document.getElementById('cloud-current-provider');
      if (providerEl) {
        if (provider) {
          providerEl.textContent = provider;
        } else if (this.ttsManager) {
          const status = this.ttsManager.getStatus();
          providerEl.textContent = status.currentProvider || 'None';
        }
      }
    }

    showGuidanceModal(guidance) {
      // Remove any existing modals
      const existingModals = document.querySelectorAll('[data-cloud-guidance-modal]');
      existingModals.forEach(modal => modal.remove());
      
      const modal = document.createElement('div');
      modal.setAttribute('data-cloud-guidance-modal', 'true');
      modal.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0,0,0,0.8); z-index: 10000; display: flex;
        align-items: center; justify-content: center; font-family: Arial, sans-serif;
      `;
      
      modal.innerHTML = `
        <div style="background: white; padding: 30px; border-radius: 15px; max-width: 600px; max-height: 80vh; overflow-y: auto; box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
          <h3 style="margin-top: 0; color: #007bff;">${guidance.title}</h3>
          <div>${guidance.message}</div>
          <div style="margin-top: 25px; text-align: center;">
            <button onclick="this.closest('[data-cloud-guidance-modal]').remove();" 
                    style="background: #007bff; color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer; font-size: 16px; margin-right: 10px;">
              ‚úì Got it!
            </button>
            <button onclick="location.reload();" 
                    style="background: #28a745; color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer; font-size: 16px;">
              üîÑ Retry
            </button>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new CloudTtsController();
    });
  } else {
    new CloudTtsController();
  }
</script>